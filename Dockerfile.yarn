FROM node:20-alpine AS base

# Устанавливаем зависимости и yarn
RUN apk add --no-cache libc6-compat openssl git

# Устанавливаем рабочую директорию
WORKDIR /app

# Устанавливаем зависимости
FROM base AS deps
COPY package.json package-lock.json ./
# Принудительно используем yarn без strict-peer-deps
RUN yarn config set network-timeout 600000 -g && \
    yarn install --network-timeout 600000 --non-interactive

# Сборка приложения
FROM base AS builder
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Генерируем Prisma клиент и собираем приложение
ENV NODE_OPTIONS="--max-old-space-size=4096"
RUN npx prisma generate
RUN yarn build

# Рабочий образ
FROM base AS runner
ENV NODE_ENV production

# Добавляем непривилегированного пользователя для запуска приложения
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Копируем необходимые файлы
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder --chown=nextjs:nodejs /app/docker-entrypoint.sh ./docker-entrypoint.sh

# Делаем entrypoint-скрипт исполняемым
RUN chmod +x ./docker-entrypoint.sh

# Создаем директорию для загрузок файлов
RUN mkdir -p ./public/uploads && chown -R nextjs:nodejs ./public/uploads

# Переключаемся на непривилегированного пользователя
USER nextjs

# Порт, который будет слушать приложение
EXPOSE 3000

# Устанавливаем entrypoint-скрипт
ENTRYPOINT ["./docker-entrypoint.sh"]

# Команда для запуска приложения
CMD ["node", "server.js"] 