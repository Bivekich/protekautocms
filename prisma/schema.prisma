generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id               String     @id @default(cuid())
  name             String
  email            String     @unique
  password         String
  role             UserRole   @default(MANAGER)
  avatarUrl        String?
  twoFactorEnabled Boolean    @default(false)
  twoFactorSecret  String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  actionsAgainst   AuditLog[] @relation("TargetUserAuditLogs")
  auditLogs        AuditLog[] @relation("UserAuditLogs")
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String
  details    String?
  userId     String
  targetId   String?
  productId  String?
  targetType String?  // Тип целевого объекта: "user", "product", "category", и т.д.
  createdAt  DateTime @default(now())
  targetUser User?    @relation("TargetUserAuditLogs", fields: [targetId], references: [id])
  user       User     @relation("UserAuditLogs", fields: [userId], references: [id])

  @@index([userId])
  @@index([targetId])
  @@index([productId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
}

model Settings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt
}

model Page {
  id          String        @id @default(cuid())
  slug        String        @unique
  title       String
  description String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  sections    PageSection[]
}

model PageSection {
  id        String   @id @default(cuid())
  pageId    String
  type      String
  order     Int
  content   Json
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([pageId])
}

model Media {
  id          String   @id @default(cuid())
  name        String
  url         String
  type        String
  size        Int
  mimeType    String
  alt         String?
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([type])
}

model Category {
  id                         String     @id @default(cuid())
  name                       String
  slug                       String     @unique
  description                String?
  parentId                   String?
  level                      Int        @default(1)
  order                      Int        @default(0)
  isVisible                  Boolean    @default(true)
  includeSubcategoryProducts Boolean    @default(false)
  imageUrl                   String?
  createdAt                  DateTime   @default(now())
  updatedAt                  DateTime   @updatedAt
  parent                     Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  subcategories              Category[] @relation("CategoryToSubcategory")
  products                   Product[]

  @@index([parentId])
}

model Product {
  id              String                  @id @default(cuid())
  name            String
  slug            String                  @unique
  sku             String                  @unique
  description     String?
  wholesalePrice  Float
  retailPrice     Float
  stock           Int                     @default(0)
  isVisible       Boolean                 @default(true)
  categoryId      String?
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  category        Category?               @relation(fields: [categoryId], references: [id])
  characteristics ProductCharacteristic[]
  images          ProductImage[]
  options         ProductOption[]

  @@index([categoryId])
  @@index([sku])
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  order     Int      @default(0)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductCharacteristic {
  id        String   @id @default(cuid())
  name      String
  value     String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductOption {
  id        String               @id @default(cuid())
  name      String
  type      String
  productId String
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  product   Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  values    ProductOptionValue[]

  @@index([productId])
}

model ProductOptionValue {
  id        String        @id @default(cuid())
  value     String
  price     Float         @default(0)
  optionId  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  option    ProductOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@index([optionId])
}

enum UserRole {
  ADMIN
  MANAGER
}
